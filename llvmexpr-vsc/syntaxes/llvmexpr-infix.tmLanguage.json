{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "LLVMExpr Infix",
  "scopeName": "source.llvmexpr-infix",
  "fileTypes": [
    "llvmexpr",
    "expr"
  ],
  "patterns": [
    {
      "include": "#preprocessor"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#directives"
    },
    {
      "include": "#labels"
    },
    {
      "include": "#function_definition"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#function_calls"
    },
    {
      "include": "#property_access"
    },
    {
      "include": "#static_pixel_access"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#special_variables"
    },
    {
      "include": "#literals"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#punctuation"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#illegal"
    }
  ],
  "repository": {
    "preprocessor": {
      "patterns": [
        {
          "name": "meta.preprocessor.define.llvmexpr-infix",
          "begin": "^\\s*(@define)\\s+([a-zA-Z_]\\w*)\\b",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.directive.define.llvmexpr-infix"
            },
            "2": {
              "name": "entity.name.constant.preprocessor.llvmexpr-infix"
            }
          },
          "end": "$",
          "patterns": [
            {
              "include": "#preprocessor_macros"
            },
            {
              "name": "constant.other.macro-value.llvmexpr-infix",
              "match": ".+"
            }
          ]
        },
        {
          "name": "meta.preprocessor.undef.llvmexpr-infix",
          "match": "^\\s*(@undef)\\s+([a-zA-Z_]\\w*)\\b",
          "captures": {
            "1": {
              "name": "keyword.control.directive.undef.llvmexpr-infix"
            },
            "2": {
              "name": "entity.name.constant.preprocessor.llvmexpr-infix"
            }
          }
        },
        {
          "name": "meta.preprocessor.conditional.llvmexpr-infix",
          "match": "^\\s*(@ifdef|@ifndef)\\s+([a-zA-Z_]\\w*)\\b",
          "captures": {
            "1": {
              "name": "keyword.control.directive.conditional.llvmexpr-infix"
            },
            "2": {
              "name": "entity.name.constant.preprocessor.llvmexpr-infix"
            }
          }
        },
        {
          "name": "keyword.control.directive.conditional.llvmexpr-infix",
          "match": "^\\s*(@else|@endif)\\b"
        },
        {
          "name": "meta.preprocessor.error.llvmexpr-infix",
          "begin": "^\\s*(@error)\\b",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.directive.error.llvmexpr-infix"
            }
          },
          "end": "$",
          "patterns": [
            {
              "name": "string.unquoted.error-message.llvmexpr-infix",
              "match": ".+"
            }
          ]
        },
        {
          "name": "meta.preprocessor.requires.llvmexpr-infix",
          "match": "^\\s*(@requires)\\s+([a-zA-Z_]\\w*)\\b",
          "captures": {
            "1": {
              "name": "keyword.control.directive.requires.llvmexpr-infix"
            },
            "2": {
              "name": "entity.name.type.library.llvmexpr-infix"
            }
          }
        },
        {
          "include": "#preprocessor_macros"
        }
      ]
    },
    "preprocessor_macros": {
      "patterns": [
        {
          "name": "constant.language.predefined-macro.mode.llvmexpr-infix",
          "match": "\\b(__EXPR__|__SINGLEEXPR__)\\b"
        },
        {
          "name": "constant.language.predefined-macro.context.llvmexpr-infix",
          "match": "\\b(__WIDTH__|__HEIGHT__|__INPUT_NUM__|__OUTPUT_BITDEPTH__|__INPUT_BITDEPTH_\\d+__|__OUTPUT_FMT__|__INPUT_FMT_\\d+__|__SUBSAMPLE_W__|__SUBSAMPLE_H__|__PLANE_NO__)\\b"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.number-sign.llvmexpr-infix",
          "match": "#.*$"
        }
      ]
    },
    "directives": {
      "patterns": [
        {
          "begin": "^(<global)",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.directive.global.llvmexpr-infix"
            }
          },
          "end": "(>)",
          "endCaptures": {
            "1": {
              "name": "keyword.other.directive.global.llvmexpr-infix"
            }
          },
          "name": "meta.directive.global.llvmexpr-infix",
          "patterns": [
            {
              "name": "keyword.other.directive.global.modifier.llvmexpr-infix",
              "match": "\\.(none|all)"
            },
            {
              "begin": "(<)",
              "beginCaptures": {
                "1": {
                  "name": "punctuation.definition.variable.begin.llvmexpr-infix"
                }
              },
              "end": "(>)",
              "endCaptures": {
                "1": {
                  "name": "punctuation.definition.variable.end.llvmexpr-infix"
                }
              },
              "patterns": [
                {
                  "name": "variable.other.llvmexpr-infix",
                  "match": "[a-zA-Z_]\\w*"
                }
              ]
            }
          ]
        }
      ]
    },
    "labels": {
      "patterns": [
        {
          "captures": {
            "1": {
              "name": "entity.name.label.llvmexpr-infix"
            }
          },
          "match": "^\\s*([a-zA-Z_]\\w*):"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.flow.llvmexpr-infix",
          "match": "\\b(if|else|while|goto|return)\\b"
        },
        {
          "name": "keyword.control.exit.llvmexpr-infix",
          "match": "\\b(exit)\\b"
        },
        {
          "name": "storage.type.function.llvmexpr-infix",
          "match": "\\b(function)\\b"
        }
      ]
    },
    "storage_types": {
      "patterns": [
        {
          "name": "storage.type.llvmexpr-infix",
          "match": "\\b(Value|Clip|Literal|Array)\\b"
        }
      ]
    },
    "function_definition": {
      "begin": "\\b(function)\\s+([a-zA-Z_][\\w]*)\\s*(\\()",
      "beginCaptures": {
        "1": {
          "name": "storage.type.function.llvmexpr-infix"
        },
        "2": {
          "name": "entity.name.function.llvmexpr-infix"
        },
        "3": {
          "name": "punctuation.definition.parameters.begin.llvmexpr-infix"
        }
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.parameters.end.llvmexpr-infix"
        }
      },
      "name": "meta.function.definition.llvmexpr-infix",
      "patterns": [
        {
          "name": "meta.parameter.declaration.llvmexpr-infix",
          "match": "\\b(Value|Clip|Literal|Array)\\b\\s+([a-zA-Z_][\\w]*)\\b",
          "captures": {
            "1": {
              "name": "storage.type.llvmexpr-infix"
            },
            "2": {
              "name": "variable.parameter.llvmexpr-infix"
            }
          }
        },
        {
          "include": "#storage_types"
        },
        {
          "name": "variable.parameter.llvmexpr-infix",
          "match": "\\b([a-zA-Z_][\\w]*)\\b"
        },
        {
          "include": "#punctuation"
        }
      ]
    },
    "function_calls": {
      "patterns": [
        {
          "name": "meta.function-call.set-prop.llvmexpr-infix",
          "begin": "\\b(set_prop)\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "support.function.io.llvmexpr-infix"
            },
            "2": {
              "name": "punctuation.parenthesis.begin.llvmexpr-infix"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.parenthesis.end.llvmexpr-infix"
            }
          },
          "patterns": [
            {
              "begin": "\\G",
              "end": "(?=[,)])",
              "patterns": [
                {
                  "name": "string.unquoted.property-name.llvmexpr-infix",
                  "match": "[a-zA-Z_]\\w*"
                }
              ]
            },
            {
              "include": "#comments"
            },
            {
              "include": "#function_calls"
            },
            {
              "include": "#constants"
            },
            {
              "include": "#special_variables"
            },
            {
              "include": "#literals"
            },
            {
              "include": "#operators"
            },
            {
              "include": "#punctuation"
            },
            {
              "include": "#variables"
            }
          ]
        },
        {
          "name": "support.function.math.llvmexpr-infix",
          "match": "\\b(sin|cos|tan|asin|acos|atan|atan2|exp|exp2|log|log2|log10|sqrt|abs|sgn|floor|ceil|round|trunc|min|max|copysign|clamp|fma)\\b(?=\\s*\\()"
        },
        {
          "name": "support.function.selection.llvmexpr-infix",
          "match": "\\b(nth_\\d+)\\b(?=\\s*\\()"
        },
        {
          "name": "support.function.memory.llvmexpr-infix",
          "match": "\\b(new|resize)\\b(?=\\s*\\()"
        },
        {
          "name": "support.function.io.llvmexpr-infix",
          "match": "\\b(dyn|store)\\b(?=\\s*\\()"
        },
        {
          "captures": {
            "1": {
              "name": "entity.name.function.llvmexpr-infix"
            }
          },
          "match": "\\b([a-zA-Z_][\\w]*)\\b(?=\\s*\\()"
        }
      ]
    },
    "property_access": {
      "patterns": [
        {
          "name": "meta.property-access.llvmexpr-infix",
          "begin": "(\\$(?:[a-w]|src\\d+))(\\.)",
          "beginCaptures": {
            "1": {
              "name": "variable.other.constant.clip.llvmexpr-infix"
            },
            "2": {
              "name": "punctuation.accessor.llvmexpr-infix"
            }
          },
          "end": "(?=[^\\w_])",
          "patterns": [
            {
              "name": "variable.other.property.llvmexpr-infix",
              "match": "[a-zA-Z_][\\w]*"
            }
          ]
        }
      ]
    },
    "static_pixel_access": {
      "patterns": [
        {
          "begin": "(\\$(?:[a-w]|src\\d+))(\\[)",
          "beginCaptures": {
            "1": {
              "name": "variable.other.constant.clip.llvmexpr-infix"
            },
            "2": {
              "name": "punctuation.brackets.square.begin.llvmexpr-infix"
            }
          },
          "end": "(\\])(:[cm])?",
          "endCaptures": {
            "1": {
              "name": "punctuation.brackets.square.end.llvmexpr-infix"
            },
            "2": {
              "name": "keyword.other.boundary-suffix.llvmexpr-infix"
            }
          },
          "name": "meta.pixel-access.static.llvmexpr-infix",
          "patterns": [
            {
              "include": "#literals"
            },
            {
              "include": "#punctuation"
            }
          ]
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.language.llvmexpr-infix",
          "match": "\\$(pi|N|X|Y|width|height)\\b"
        },
        {
          "name": "variable.other.constant.clip.llvmexpr-infix",
          "match": "\\$(?:[a-w]|src\\d+)\\b"
        }
      ]
    },
    "special_variables": {
      "patterns": [
        {
          "name": "variable.language.special.result.llvmexpr-infix",
          "match": "\\bRESULT\\b"
        },
        {
          "name": "variable.language.special.frame.llvmexpr-infix",
          "match": "\\bframe\\b"
        }
      ]
    },
    "literals": {
      "patterns": [
        {
          "name": "constant.numeric.hex.llvmexpr-infix",
          "match": "\\b0x[0-9a-fA-F]+(?:\\.[0-9a-fA-F]*)?(?:[pP][+-]?[0-9]+)?\\b"
        },
        {
          "name": "constant.numeric.octal.llvmexpr-infix",
          "match": "\\b0[0-7]+\\b"
        },
        {
          "name": "constant.numeric.float.llvmexpr-infix",
          "match": "\\b(?:[0-9]+\\.[0-9]*|\\.[0-9]+)(?:[eE][+-]?[0-9]+)?\\b"
        },
        {
          "name": "constant.numeric.integer.llvmexpr-infix",
          "match": "\\b[0-9]+(?:[eE][+-]?[0-9]+)?\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.assignment.llvmexpr-infix",
          "match": "="
        },
        {
          "name": "keyword.operator.ternary.llvmexpr-infix",
          "match": "[?:]"
        },
        {
          "name": "keyword.operator.logical.llvmexpr-infix",
          "match": "&&|\\|\\||!"
        },
        {
          "name": "keyword.operator.bitwise.llvmexpr-infix",
          "match": "\\&|\\||\\^|~"
        },
        {
          "name": "keyword.operator.comparison.llvmexpr-infix",
          "match": "==|!="
        },
        {
          "name": "keyword.operator.relational.llvmexpr-infix",
          "match": "<=|>=|<|>"
        },
        {
          "name": "keyword.operator.arithmetic.llvmexpr-infix",
          "match": "\\*\\*|\\*|/|%|\\+|-|-"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.terminator.statement.llvmexpr-infix",
          "match": ";"
        },
        {
          "name": "punctuation.separator.comma.llvmexpr-infix",
          "match": ","
        },
        {
          "name": "punctuation.parenthesis.begin.llvmexpr-infix",
          "match": "\\("
        },
        {
          "name": "punctuation.parenthesis.end.llvmexpr-infix",
          "match": "\\)"
        },
        {
          "name": "punctuation.brace.curly.begin.llvmexpr-infix",
          "match": "\\{"
        },
        {
          "name": "punctuation.brace.curly.end.llvmexpr-infix",
          "match": "\\}"
        },
        {
          "name": "punctuation.brackets.square.begin.llvmexpr-infix",
          "match": "\\["
        },
        {
          "name": "punctuation.brackets.square.end.llvmexpr-infix",
          "match": "\\]"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.llvmexpr-infix",
          "match": "\\b[a-zA-Z_]\\w*\\b"
        }
      ]
    },
    "illegal": {
      "patterns": [
        {
          "name": "invalid.illegal.reserved-prefix.llvmexpr-infix",
          "match": "\\b__internal_\\w*\\b"
        }
      ]
    }
  }
}